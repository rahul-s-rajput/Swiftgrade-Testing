name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Mark Grading Assistant v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            
          - platform: 'ubuntu-22.04'
            args: ''
            
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install fastapi uvicorn httpx supabase
          pip install -r requirements-backend.txt || echo "No requirements-backend.txt found"

      - name: Get rust target
        id: rust-target
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "target=x86_64-pc-windows-msvc" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "target=universal-apple-darwin" >> $GITHUB_OUTPUT
          else
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          fi

      - name: Build Python backend (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Create spec file if it doesn't exist
          if (!(Test-Path backend_launcher.spec)) {
            pyinstaller --onefile --name backend-x86_64-pc-windows-msvc backend_launcher.py
          } else {
            pyinstaller backend_launcher.spec --clean
          }
          
          # Ensure binaries directory exists
          New-Item -ItemType Directory -Force -Path src-tauri/binaries
          
          # Move the executable
          if (Test-Path dist/backend-x86_64-pc-windows-msvc.exe) {
            Move-Item -Force dist/backend-x86_64-pc-windows-msvc.exe src-tauri/binaries/
          } elseif (Test-Path dist/backend.exe) {
            Move-Item -Force dist/backend.exe src-tauri/binaries/backend-x86_64-pc-windows-msvc.exe
          }

      - name: Build Python backend (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          # Create spec file if it doesn't exist
          if [ ! -f backend_launcher.spec ]; then
            pyinstaller --onefile --name backend backend_launcher.py
          else
            pyinstaller backend_launcher.spec --clean
          fi
          
          # Ensure binaries directory exists
          mkdir -p src-tauri/binaries
          
          # Build for both architectures on macOS
          if [ -f dist/backend ]; then
            # Universal binary for macOS
            cp dist/backend src-tauri/binaries/backend-x86_64-apple-darwin
            cp dist/backend src-tauri/binaries/backend-aarch64-apple-darwin
            chmod +x src-tauri/binaries/backend-*
          fi

      - name: Build Python backend (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # Create spec file if it doesn't exist
          if [ ! -f backend_launcher.spec ]; then
            pyinstaller --onefile --name backend-x86_64-unknown-linux-gnu backend_launcher.py
          else
            pyinstaller backend_launcher.spec --clean
          fi
          
          # Ensure binaries directory exists
          mkdir -p src-tauri/binaries
          
          # Move the executable
          if [ -f dist/backend-x86_64-unknown-linux-gnu ]; then
            mv dist/backend-x86_64-unknown-linux-gnu src-tauri/binaries/
          elif [ -f dist/backend ]; then
            mv dist/backend src-tauri/binaries/backend-x86_64-unknown-linux-gnu
          fi
          chmod +x src-tauri/binaries/backend-*

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ steps.rust-target.outputs.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libgtk-3-dev \
            libayatana-appindicator3-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # For code signing on macOS (optional but recommended)
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # For code signing on Windows (optional but recommended)
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false,
              prerelease: false
            })